name: Deploy frontend

on:
  push:
    branches:
      - frontend
      - edit-ci-cd
  pull_request:
    types: [opened, reopened, synchronize]
    branches:
      - frontend
      - edit-ci-cd

jobs:
  buid-static:
    if: ${{ github.ref == 'edit-ci-cd' || 'frontend' }}
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: npm ci
      - run: npm run build --if-present
      - run: mkdir artefacts
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: artefacts/
  
  #deploy-front-to-dev:
  #  if: ${{ github.ref == 'edit-ci-cd' || 'frontend' }}
  #  runs-on: [self-hosted, linux, timeweb]
  #  environment: dev
  #  steps:
  #    - name: Configure SSH
  #      run: |
  #        mkdir -p ~/.ssh/
  #        echo "$SSH_KEY" > ~/.ssh/staging.key
  #        chmod 600 ~/.ssh/staging.key
  #        cat >>~/.ssh/config <<END
  #        Host staging
  #          HostName $SSH_HOST
  #          User $SSH_USER
  #          IdentityFile ~/.ssh/staging.key
  #          StrictHostKeyChecking no
  #        END
  #      env:
  #        SSH_USER: ${{ secrets.SSH_USER }}
  #        SSH_KEY: ${{ secrets.SSH_PRIV_KEY }}
  #        SSH_HOST: ${{ secrets.SSH_HOST }}
  #    
  #    - name: Git & Docker
  #      env:
  #        PROJECT_FOLDER: ${{ secrets.PROJECT_FOLDER }}
  #        ENV_MENU: ${{ vars.ENV_VAR }}
  #        VITE_API_URL: ${{ vars.VITE_API_URL }}
  #        PORT_NGINX: ${{ vars.PORT_NGINX }}
  #      run: |
  #        echo $PROJECT_FOLDER
  #        cd $PROJECT_FOLDER
  #        git pull
  #        git checkout edit-ci-cd
  #        git pull
  #        docker compose -f ./infra/docker-compose.front.yml down || true
  #        docker rmi develop-front:latest || true
  #        docker compose -f ./infra/docker-compose.front.yml up -d 
