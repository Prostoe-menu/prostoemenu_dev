name: Deploy prostoemenu to vds

on:
  push:
    branches: 
      - master
      - dev
      - new-ci-cd
    tags: 
      - 'releases-*'
  # Allows you to run this workflow manually from the Actions tab
  # workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy-to-prod:
    if: ${{ github.ref == 'master' }}
    runs-on: [self-hosted, linux, firstvds]
    environment: prod
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
          Host staging
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/staging.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY: ${{ secrets.SSH_PRIV_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
      
      - name: Git & Docker
        env: 
          PROJECT_FOLDER: ${{ secrets.PROJECT_FOLDER }}
          ENV_MENU: ${{ vars.ENV_VAR }}
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}
          POSTGRES_PASSWORD: ${{ vars.POSTGRES_PASSWORD }}
          POSTGRES_USER: ${{ vars.POSTGRES_USER }}
          ENV_STAGE: ${{ vars.ENV_VAR }}
          PORT_NGINX: ${{ vars.PORT_NGINX }}
        run: |
          echo $PROJECT_FOLDER
          cd $PROJECT_FOLDER
          git checkout master
          git pull
          docker compose -f docker-compose.prod.yml down || true
          docker compose -f docker-compose.prod.yml up -d
  
  deploy-to-dev:
    if: ${{ github.ref == 'new-ci-cd' || 'dev' }}
    runs-on: [self-hosted, linux, timeweb]
    environment: dev
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
          Host staging
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/staging.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY: ${{ secrets.SSH_PRIV_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
      
      - name: Git & Docker
        env: 
          PROJECT_FOLDER: ${{ secrets.PROJECT_FOLDER }}
          ENV_MENU: ${{ vars.ENV_VAR }}
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}
          POSTGRES_PASSWORD: ${{ vars.POSTGRES_PASSWORD }}
          POSTGRES_USER: ${{ vars.POSTGRES_USER }}
          ENV_STAGE: ${{ vars.ENV_VAR }}
          PORT_NGINX: ${{ vars.PORT_NGINX }}
        run: |
          echo $PROJECT_FOLDER
          cd $PROJECT_FOLDER
          git checkout new-ci-cd
          git pull
          docker compose -f ./infra/develop/docker-compose.dev.yml down || true
          docker rmi develop-web:latest || true
          docker compose -f ./infra/develop/docker-compose.dev.yml up -d        